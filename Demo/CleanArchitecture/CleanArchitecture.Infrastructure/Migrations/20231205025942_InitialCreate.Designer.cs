// <auto-generated />
using System;
using System.Collections.Generic;
using CleanArchitecture.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CleanArchitecture.Infrastructure.Migrations
{
    [DbContext(typeof(PostgresqlContext))]
    [Migration("20231205025942_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CleanArchitecture.Domain.Models.Account.AccountEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("About")
                        .HasMaxLength(2500)
                        .HasColumnType("character varying(2500)");

                    b.Property<byte>("AccountType")
                        .HasColumnType("smallint");

                    b.Property<DateTimeOffset?>("Added")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("DesiredJob")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateOnly?>("InterviewDate")
                        .HasColumnType("date");

                    b.Property<int>("JobStatus")
                        .HasColumnType("integer");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset?>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<string[]>("Skills")
                        .HasMaxLength(450)
                        .HasColumnType("text[]");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<byte>("TimeZone")
                        .HasColumnType("smallint");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.ComplexProperty<Dictionary<string, object>>("Approval", "CleanArchitecture.Domain.Models.Account.AccountEntity.Approval#Approval", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Reason")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<bool>("Yes")
                                .HasColumnType("boolean");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Point", "CleanArchitecture.Domain.Models.Account.AccountEntity.Point#PointInfo", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Total")
                                .HasColumnType("integer");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Profession", "CleanArchitecture.Domain.Models.Account.AccountEntity.Profession#ProfessionInfo", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Company")
                                .HasColumnType("text");

                            b1.Property<int?>("YearOfExperience")
                                .HasColumnType("integer");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Student", "CleanArchitecture.Domain.Models.Account.AccountEntity.Student#StudentInfo", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("School")
                                .HasColumnType("text");

                            b1.Property<int?>("YearOfGraduation")
                                .HasColumnType("integer");
                        });

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Models.Event.EventAttendeeEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying(26)");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("Added")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Confirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("EventId")
                        .IsRequired()
                        .HasColumnType("character varying(26)");

                    b.Property<decimal>("Fee")
                        .HasColumnType("numeric");

                    b.Property<DateTimeOffset?>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Paid")
                        .HasColumnType("boolean");

                    b.Property<string>("TransactionId")
                        .HasColumnType("character varying(26)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("EventId");

                    b.ToTable("EventAttendees");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Models.Event.EventEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("character varying(26)");

                    b.Property<DateTimeOffset?>("Added")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("BannerUrl")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateOnly>("ClosedDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("ClosedTime")
                        .HasColumnType("time without time zone");

                    b.Property<DateOnly>("DateAt")
                        .HasColumnType("date");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<byte>("EventType")
                        .HasColumnType("smallint");

                    b.Property<decimal>("Fee")
                        .HasColumnType("numeric");

                    b.Property<decimal>("FeeRate")
                        .HasColumnType("numeric");

                    b.Property<int>("MaxAttendee")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("OpenDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("OpenTime")
                        .HasColumnType("time without time zone");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<byte>("PaymentMethod")
                        .HasColumnType("smallint");

                    b.Property<TimeOnly>("TimeAt")
                        .HasColumnType("time without time zone");

                    b.Property<byte>("TimeZone")
                        .HasColumnType("smallint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.ComplexProperty<Dictionary<string, object>>("Approval", "CleanArchitecture.Domain.Models.Event.EventEntity.Approval#Approval", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Reason")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<bool>("Yes")
                                .HasColumnType("boolean");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Conference", "CleanArchitecture.Domain.Models.Event.EventEntity.Conference#ConferenceOption", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("MeetingId")
                                .HasColumnType("text");

                            b1.Property<string>("PassCode")
                                .HasColumnType("text");

                            b1.Property<byte>("Tool")
                                .HasColumnType("smallint");

                            b1.Property<byte>("Type")
                                .HasColumnType("smallint");

                            b1.Property<string>("Url")
                                .IsRequired()
                                .HasColumnType("text");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Location", "CleanArchitecture.Domain.Models.Event.EventEntity.Location#Address", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("District")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Line")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Line2")
                                .HasColumnType("text");

                            b1.Property<string>("State")
                                .HasColumnType("text");

                            b1.Property<string>("Ward")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("ZipCode")
                                .HasColumnType("text");
                        });

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Models.FeatureFlag.FeatureFlagEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("Added")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("Enable")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("character varying(25)");

                    b.HasKey("Id");

                    b.ToTable("FeatureFlags");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Models.Account.AccountEntity", b =>
                {
                    b.OwnsMany("CleanArchitecture.Domain.Models.Account.ValueObjects.EducationInfo", "EducationInfos", b1 =>
                        {
                            b1.Property<Guid>("OwnerId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<DateOnly>("From")
                                .HasColumnType("date");

                            b1.Property<bool>("IsCurrent")
                                .HasColumnType("boolean");

                            b1.Property<string>("Majors")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("SchoolName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<DateOnly?>("To")
                                .HasColumnType("date");

                            b1.HasKey("OwnerId", "Id");

                            b1.ToTable("Accounts");

                            b1.ToJson("EducationInfos");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.Navigation("EducationInfos");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Models.Event.EventAttendeeEntity", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Models.Account.AccountEntity", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Domain.Models.Event.EventEntity", "Event")
                        .WithMany("Attendees")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Models.Event.EventEntity", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Models.Account.AccountEntity", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("CleanArchitecture.Domain.ValueObjects.WithName", "Tags", b1 =>
                        {
                            b1.Property<string>("OwnerId")
                                .HasColumnType("character varying(26)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("OwnerId", "Id");

                            b1.ToTable("EventTags", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.Navigation("Owner");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Models.Event.EventEntity", b =>
                {
                    b.Navigation("Attendees");
                });
#pragma warning restore 612, 618
        }
    }
}
